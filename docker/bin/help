#!/usr/bin/env bash

function error(){
  {
   cat << ERR 1>&2 
Sorry. An error has occurred :_(
Refer "exutils help" for how to use the command.
ERR
   exit 1
  }
}

function usage(){
  {
   cat << EOS >&2
Commands:
  exutils prim [OPTION] [NUMBER]  # Print prime numbers of given NUMBER.
  exutils camb [OPTION] [NUMBER]  # Displays standard input while convolving.
  exutils divi [OPTION] [NUMBER]  # Display divisor of given NUMBER.
  exutils help [COMMAND]          # Describe available commands or one specific command.
  exutils version                 # Show version and info
EOS
  }
}

function prim(){
  {
   cat << EOS >&2
Usage: prim [OPTION]... FIRST 
   or: prim [OPTION]... FIRST LAST 
   or: prim [OPTION]... FIRST INCREMENT LAST 
Print prime numbers from FIRST to LAST, in steps of INCREMENT.

Options: 
  -s ,--separator=[SEPARATOR] Use STRING to separate numbers (default: n) 
  -f ,--format=[FORMAT]       Use printf style FORMAT
  -w, --equal-width           Equalize width by padding with leading zeroes
  -h, --help                  Display this help and exit 
  -v, --version               Output version information
EOS
  }
}

function camb(){
  {
   cat << EOS >&2
Usage: camb [OPTION] [NUMBER] 
Displays standard input while convolving with the given NUMBER.

If NUMBER is not given, NUMBER is automatically interpreted as 1.
NUMBER cannot be set to a value less than 0.

Option: 
  -r, --right      Display with right convolving 
  -h, --help       Show usage 
  -v, --version    Show version and info 

TL;DR 
  $ seq -w 10 | camb 5 
  01 02 03 04 05 
  02 03 04 05 06 
  03 04 05 06 07 
  04 05 06 07 08 
  05 06 07 08 09 
  06 07 08 09 10
EOS
  }
}

function divi(){
  {
   cat << EOS >&2
Usage: divi [OPTION] [NUMBER] 
Display divisor of given NUMBER. 

Option: 
  -r, --reverse    Displays divisors in reverse order 
  -h, --help       Show usage 
  -v, --version    Show version and info

TL;DR 
  $ divi 100 
  1 2 4 5 10 20 25 50 100

  $ seq 5 | divi -r 
  1  
  2 1  
  3 1  
  4 2 1  
  5 1
EOS
  }
}

function perse_com(){
  if [[ -z "${1}" ]]; then
    usage
  elif [[ "${1}" == prim ]]; then
    prim
  elif [[ "${1}" == camb ]]; then
    camb
  elif [[ "${1}" == divi ]]; then
    divi
  else
    error
  fi
}

{
 perse_com "${@}"
}