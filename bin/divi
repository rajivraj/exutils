#!/usr/bin/env bash
#
# @(#)divi 0.0.1
# @(#)(c) 2019 redpeacock78
# @(#)GPLv3+ is applied to this script.
# @(#)
########################################
# @(#)Display divisor of given NUMBER.
# @(#)Grobals:
# @(#)  None
# @(#)Arguments:
# @(#)  -r, --reverse
# @(#)  -h, --help
# @(#)  -v, --version
# @(#)Returns:
# @(#)  None
# @(#)Depends:
# @(#)  GNU FGREP
# @(#)  GNU XARGS
# @(#)  BASH
# @(#)  HEAD
# @(#)  SORT
# @(#)  YES
# @(#)  AWK
########################################



####ALIAS_ACTIVATION####
shopt -s expand_aliases


####ALIAS_SETTING####
function alias_set(){
  {
   if type "gfgrep" > /dev/null 2>&1; then
     alias fgrep="gfgrep"
   else
     if [[ "$(fgrep --version | head -n1)" =~ "GNU" ]] > /dev/null 2>&1; then
       :
      else
       echo "Error: Please install GNU GREP." 1>&2 && \
       exit 2
     fi
   fi
  }
  {
   if type "gxargs" > /dev/null 2>&1; then
     alias xargs="gxargs"
   else
     if [[ "$(xargs --version | head -n1)" =~ "GNU" ]] > /dev/null 2>&1; then
       :
     else
       echo "Error: Please install GNU XARGS." 1>&2 && \
       exit 2
     fi
   fi
  }
}


####MESSAGES####
###VERSION###
function version(){
  {
   cat << EOS >&2
${0##*/} 0.0.1
Copyright (C) 2019 redpeacock78
License GPLv3+: GNU GPL version3 or later.

THIS IS FREE SOFTWARE.
YOU ARE FREE TO CHANGE AND REDISTRIBUTE IT.
THERE IS NO WARRANTY, TO THE EXTENT PERMITTED BY LAW.

Written by redpeacock78 <https://github.com/redpeacock78>.
EOS
   exit 0
  }
}
###SHOW_USAGE###
function usage(){
  {
   cat << EOS >&2
Usage: ${0##*/} [OPTION] [NUMBER]
Display divisor of given NUMBER.

Option:
  -r, --reverse    Displays divisors in reverse order
  -h, --help       Show usage
  -v, --version    Show version and info

TL;DR
  $ ${0##*/} 100
  1 2 4 5 10 20 25 50 100

  $ seq 5 | ${0##*/} -r
  1 
  2 1 
  3 1 
  4 2 1 
  5 1
EOS
   exit 0
  }
}
###ERROR_MESSAGE###
function error(){
  {
   cat << ERR 1>&2
${0##*/}: Sorry. An error has occurred :_(
Refer '${0##*/} -h' or '${0##*/} --help' for how to use the command.
ERR
   exit 1
  }
}


####MAIN_PROCESSING####
function generate_divisor(){
  {
   yes "${@}" \
   | head -n "${@}" \
   | LANG=C awk '{print $1/NR}' \
   | LANG=C sort -nu \
   | LANG=C fgrep -v .
  } 2>/dev/null
}
function main(){
  {
   export -f generate_divisor
   builtin echo "${@}" \
   | xargs -n1 -I @ bash -c 'builtin echo $(generate_divisor @)'
  }
}
function re_main(){
  {
   while read LINE; do
     awk '{for(i=NF;i>0;i--)printf("%s ",$i)}' <<< "${LINE}" \
     | awk 'sub(/ $/,"",$0)'
   done < <(main "${@}")
  }
}

function option_perse(){
  export LC_ALL=C
  export LANG=C
  if [[ -p /dev/stdin ]]; then
    declare NUMBER="$(cat -)"
    if [[ "${@}" == -r ]] || \
       [[ "${@}" == --reverse ]]; then
      re_main "${NUMBER}"
    else
      main "${NUMBER}"
    fi
  elif [[ "${@}" == -h ]] || \
       [[ "${@}" == --help ]]; then
    usage
  elif [[ "${@}" == -v ]] || \
       [[ "${@}" == --version ]]; then
    version
  elif [[ -z "${@}" ]]; then
    error
  elif [[ "${@}" =~ [0-9]*$ ]]; then
    if [[ "${1}" == -r ]] || \
       [[ "${1}" == --reverse ]]; then
      if [[ -z "${2}" ]]; then
        error
      else
        declare NUMBER="${2}"
        re_main "${NUMBER}"
      fi
    elif [[ "${1}" =~ ^[0-9]*$ ]]; then
      declare NUMBER="${@}"
      main "${NUMBER}"
    else
      error
    fi
  fi
}

{
 alias_set && \
 option_perse "${@}"
}
