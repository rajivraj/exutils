#!/usr/bin/env bash
#
#(@)divi 0.0.1
#(@)(c) 2019 redpeacock78
#(@)GPLv3+ is applied to this script.
#(@)
########################################
#(@)Display divisor of given NUMBER.
#(@)Grobals:
#(@)  None
#(@)Arguments:
#(@)  -r, --reverse
#(@)  -h, --help
#(@)  -v, --version
#(@)Returns:
#(@)  None
#(@)Depends:
#(@)  BASH
#(@)  HEAD
#(@)  GREP
#(@)  UNIQ
#(@)  YES
#(@)  AWK
#(@)  TR
########################################

####MESSAGES####
###VERSION###
function version(){
  {
   cat << EOS >&2
${0##*/} 0.0.1
Copyright (C) 2019 redpeacock78
License GPLv3+: GNU GPL version3 or later.

THIS IS FREE SOFTWARE.
YOU ARE FREE TO CHANGE AND REDISTRIBUTE IT.
THERE IS NO WARRANTY, TO THE EXTENT PERMITTED BY LAW.

Written by redpeacock78 <https://github.com/redpeacock78>.
EOS
   exit 0
  }
}
###SHOW_USAGE###
function usage(){
  {
   cat << EOS >&2
Usage: ${0##*/} [OPTION] [NUMBER]
Display divisor of given NUMBER.

Option:
  -r, --reverse    Displays divisors in reverse order
  -h, --help       Show usage
  -v, --version    Show version and info

TL;DR
  $ ${0##*/} 100
  100 50 25 20 10 5 4 2 1

  $ seq 5 | ${0##*/} -r
  1
  1 2
  1 3
  1 2 4
  1 5
EOS
   exit 0
  }
}
###ERROR_MESSAGE###
function error(){
  {
   cat << ERR 1>&2
${0##*/}: Sorry. An error has occurred :_(
Refer '${0##*/} -h' or '${0##*/} --help' for how to use the command.
ERR
   exit 1
  }
}


####MAIN_PROCESSING####
function generate_divisor(){
  {
   yes "${@}" \
   | head -n "${@}" \
   | awk '{print $1/NR}' \
   | grep -vF --line-buffered . \
   | uniq \
   | tr \\n ' ' \
   | awk 'sub(/ $/,"",$0)'
  } 2>/dev/null
}
function main(){
  export -f generate_divisor
  echo "${@}" \
  | xargs -n1 -I @ bash -c 'generate_divisor @'
}

function option_perse(){
  if [[ -p /dev/stdin ]]; then
  	declare NUMBER="$(cat -)"
  	if [[ "${@}" == -r ]] || \
  	   [[ "${@}" == --reverse ]]; then
  	  main "${NUMBER}" \
  	  | awk '{for(i=NF;i>0;i--) printf("%s ",$i);printf("\n");}'
  	else
  	  main "${NUMBER}" || \
  	  error
  	fi
  elif [[ "${@}" == -h ]] || \
       [[ "${1}" == --help ]]; then
    usage
  elif [[ "${@}" == -v ]] || \
       [[ "${@}" == --version ]]; then
    version
  elif [[ -z "${@}" ]]; then
  	error
  elif [[ "${@}" =~ [0-9]*$ ]]; then
  	if [[ "${1}" == -r ]] || \
  	   [[ "${1}" == --reverse ]]; then
  	  declare NUMBER="${@}"
      main "${NUMBER}" \
      | awk '{for(i=NF;i>0;i--) printf("%s ",$i);printf("\n");}'
    elif [[ "${1}" =~ ^[0-9]*$ ]]; then
      declare NUMBER="${@}"
      main "${NUMBER}"
    else
      error
    fi
  fi
}

option_perse "${@}"