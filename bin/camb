#!/usr/bin/env bash
#
# @(#)camb 0.0.1
# @(#)(c) 2019 redpeacock78
# @(#)GPLv3+ is applied to this script.
# @(#)
########################################
# @(#)Displays standard input while convolving with the given NUMBER.
# @(#)Grobals:
# @(#)  None
# @(#)Arguments:
# @(#)  -r, --right
# @(#)  -h, --help
# @(#)  -v, --version
# @(#)Returns:
# @(#)  None
# @(#)Depends:
# @(#)  BASH
# @(#)  AWK
# @(#)  CAT
########################################



####MESSAGES####
###VERSION###
function version(){
  {
   cat << EOS >&2
${0##*/} 0.0.1
Copyright (C) 2019 redpeacock78
License GPLv3+: GNU GPL version3 or later.

THIS IS FREE SOFTWARE.
YOU ARE FREE TO CHANGE AND REDISTRIBUTE IT.
THERE IS NO WARRANTY, TO THE EXTENT PERMITTED BY LAW.

Written by redpeacock78 <https://github.com/redpeacock78>.
EOS
   exit 0
  }
}
###SHOW_USAGE###
function usage(){
  {
   cat << EOS >&2
Usage: ${0##*/} [OPTION] [NUMBER]
Displays standard input while convolving with the given NUMBER.

If NUMBER is not given, NUMBER is automatically interpreted as "1".
NUMBER cannot be set to a value less than "0".

Option:
  -r, --right      Display with right convolving
  -h, --help       Show usage
  -v, --version    Show version and info

TL;DR
  $ seq -w 10 | ${0##*/} 5
  01 02 03 04 05
  02 03 04 05 06
  03 04 05 06 07
  04 05 06 07 08
  05 06 07 08 09
  06 07 08 09 10
EOS
   exit 0
  }
}
###ERROR_MESSAGE###
function error(){
  {
   cat << ERR 1>&2
${0##*/}: Sorry. An error has occurred :_(
Refer '${0##*/} -h' or '${0##*/} --help' for how to use the command.
ERR
   exit 1
  }
}


####MAIN_PROCESSING####
function shift_args(){
  function main(){
   declare MAX="$(echo $(($((${#} - ${NUMBER})) + 1)))"
   declare RECURRING_TIMES="$(eval echo {1..${MAX}})"
   for i in ${RECURRING_TIMES}; do
   	 builtin echo "${@:1:${NUMBER}}" && \
   	 shift
   done
  }
  {
   cat <(main ${@}) && \
   exit 0
  } || \
  error
}

function pass_stdin(){
  if [[ -p /dev/stdin ]]; then
    declare STDIN="$(awk -v RS='\r\n' -v ORS='\n' '{print}' <(cat -))"
    declare ARRAY_STDIN=($(echo ${STDIN}))
    if [[ "${1}" == -r ]] || \
       [[ "${1}" == --right ]]; then
      declare R_STDIN="$(awk '{for(i=NF;i>0;i--)print $i}' <<< ${STDIN})"
      if [[ "${2}" =~ ^[0-9]*$ ]]; then
        if [[ ${#ARRAY_STDIN[@]} -gt "${2}" ]]; then
          if [[ "${2:-1}" -le 0 ]]; then
            error
          else
            declare NUMBER="${2:-1}"
            shift_args ${R_STDIN}
          fi
        else
          echo ${R_STDIN}
        fi
      else
        declare NUMBER="${@}"
        shift_args ${R_STDIN}
      fi
    elif [[ "${@}" =~ ^[0-9]*$ ]]; then
      if [[ ${#ARRAY_STDIN[@]} -gt "${@}" ]]; then
        if [[ "${@:-1}" -le 0 ]]; then
          error
        else
          declare NUMBER="${@:-1}"
          shift_args ${STDIN}
        fi
      else
        echo ${STDIN}
      fi
    else
      error
    fi
  elif [[ "${@}" == -h ]] || \
       [[ "${1}" == --help ]]; then
    usage
  elif [[ "${@}" == -v ]] || \
       [[ "${@}" == --version ]]; then
    version
  else
    error
  fi
}

pass_stdin "${@}"